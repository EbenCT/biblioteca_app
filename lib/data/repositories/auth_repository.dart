// ignore_for_file: unused_field

import 'package:dartz/dartz.dart';
import '../../core/errors/failures.dart';
import '../../core/config/graphql_config.dart';
import '../../core/services/auth_service.dart';
import '../../core/services/token_storage_service.dart';
import '../../core/services/graphql_service.dart';
import '../../domain/entities/entities.dart';
import '../../domain/repositories/repositories.dart';

class RealAuthRepository implements AuthRepository {
  final AuthService _authService;
  final TokenStorageService _tokenStorage;
  final GraphQLService _graphQLService;

  RealAuthRepository(
    this._authService,
    this._tokenStorage,
    this._graphQLService,
  );

  @override
  Future<Either<Failure, User>> login(String email, String password) async {
    try {
      print('üîê Attempting login with: $email');
      
      // Llamar al endpoint REST de autenticaci√≥n
      final authResponse = await _authService.signIn(email, password);
      
      print('üîç AuthResponse details:');
      print('   Token length: ${authResponse.token.length}');
      print('   User ID: ${authResponse.user.id}');
      print('   User name: ${authResponse.user.name}');
      print('   User email: ${authResponse.user.email}');
      print('   User role: ${authResponse.user.role}');
      
      // Guardar el token y datos del usuario
      await _tokenStorage.saveToken(authResponse.token);
      await _tokenStorage.saveUserData({
        'id': authResponse.user.id,
        'name': authResponse.user.name,
        'email': authResponse.user.email,
        'role': authResponse.user.role,
      });
      
      print('üíæ Token and user data saved successfully');
      
      // Actualizar el cliente GraphQL con el token
      _updateGraphQLClientWithToken(authResponse.token);
      
      // Convertir a entidad del dominio
      final user = User(
        id: authResponse.user.id,
        name: authResponse.user.name,
        email: authResponse.user.email,
        phoneNumber: '', // No disponible en la respuesta de auth
        address: '', // No disponible en la respuesta de auth
        profileImage: _generateProfileImageUrl(authResponse.user.name),
      );
      
      print('‚úÖ Login successful for user: ${user.name}');
      return Right(user);
      
    } on AuthException catch (e) {
      print('‚ùå Auth error: ${e.message}');
      return Left(AuthFailure(e.message));
    } catch (e) {
      print('‚ùå Login error: $e');
      print('‚ùå Error type: ${e.runtimeType}');
      print('‚ùå Stack trace: ${StackTrace.current}');
      return Left(ServerFailure('Error de conexi√≥n con el servidor: ${e.toString()}'));
    }
  }

  @override
  Future<Either<Failure, User>> register(
    String name,
    String email,
    String password,
    String phone,
    String address,
  ) async {
    try {
      print('üìù Attempting registration with: $email');
      
      // Llamar al endpoint REST de registro
      final authResponse = await _authService.signUp(name, email, password);
      
      // Guardar el token y datos del usuario
      await _tokenStorage.saveToken(authResponse.token);
      await _tokenStorage.saveUserData({
        'id': authResponse.user.id,
        'name': authResponse.user.name,
        'email': authResponse.user.email,
        'role': authResponse.user.role,
      });
      
      // Actualizar el cliente GraphQL con el token
      _updateGraphQLClientWithToken(authResponse.token);
      
      // Convertir a entidad del dominio
      final user = User(
        id: authResponse.user.id,
        name: authResponse.user.name,
        email: authResponse.user.email,
        phoneNumber: phone,
        address: address,
        profileImage: _generateProfileImageUrl(authResponse.user.name),
      );
      
      print('‚úÖ Registration successful for user: ${user.name}');
      return Right(user);
      
    } on AuthException catch (e) {
      print('‚ùå Registration error: ${e.message}');
      return Left(AuthFailure(e.message));
    } catch (e) {
      print('‚ùå Registration error: $e');
      return Left(ServerFailure('Error de conexi√≥n con el servidor'));
    }
  }

  @override
  Future<Either<Failure, void>> logout() async {
    try {
      print('üö™ Logging out user');
      
      // Limpiar tokens almacenados
      await _tokenStorage.clearAllTokens();
      
      // Reinicializar el cliente GraphQL sin token
      _updateGraphQLClientWithToken(null);
      
      print('‚úÖ Logout successful');
      return const Right(null);
      
    } catch (e) {
      print('‚ùå Logout error: $e');
      return Left(ServerFailure('Error durante el logout'));
    }
  }

  @override
  Future<Either<Failure, User>> getCurrentUser() async {
    try {
      print('üë§ Getting current user');
      
      // Verificar si tenemos un token v√°lido
      final hasValidToken = await _tokenStorage.hasValidToken();
      if (!hasValidToken) {
        print('‚ùå No valid token found');
        return Left(AuthFailure('No hay sesi√≥n activa'));
      }
      
      // Obtener datos del usuario almacenados
      final userData = await _tokenStorage.getUserData();
      if (userData == null) {
        print('‚ùå No user data found');
        await _tokenStorage.clearAllTokens();
        return Left(AuthFailure('Datos de usuario no encontrados'));
      }
      
      // Obtener el token para el cliente GraphQL
      final token = await _tokenStorage.getToken();
      if (token != null) {
        _updateGraphQLClientWithToken(token);
      }
      
      // Convertir a entidad del dominio
      final user = User(
        id: userData['id']?.toString() ?? '',
        name: userData['name'] ?? '',
        email: userData['email'] ?? '',
        phoneNumber: userData['phone'] ?? '',
        address: userData['address'] ?? '',
        profileImage: _generateProfileImageUrl(userData['name'] ?? ''),
      );
      
      print('‚úÖ Current user retrieved: ${user.name}');
      return Right(user);
      
    } catch (e) {
      print('‚ùå Get current user error: $e');
      return Left(ServerFailure('Error obteniendo usuario actual'));
    }
  }

  @override
  Future<Either<Failure, User>> updateProfile(User user, {String? password}) async {
    try {
      print('üìù Updating profile for user: ${user.name}');
      
      // Por ahora, solo actualizar datos localmente
      // En el futuro, podr√≠as implementar un endpoint REST para actualizar perfil
      await _tokenStorage.saveUserData({
        'id': user.id,
        'name': user.name,
        'email': user.email,
        'phone': user.phoneNumber,
        'address': user.address,
      });
      
      print('‚úÖ Profile updated successfully');
      return Right(user);
      
    } catch (e) {
      print('‚ùå Update profile error: $e');
      return Left(ServerFailure('Error actualizando perfil'));
    }
  }

  @override
  Future<Either<Failure, void>> forgotPassword(String email) async {
    try {
      print('üîë Forgot password for: $email');
      
      // Por ahora, simular env√≠o exitoso
      // En el futuro, implementar endpoint REST para recuperaci√≥n de contrase√±a
      await Future.delayed(const Duration(seconds: 2));
      
      print('‚úÖ Password reset email sent (simulated)');
      return const Right(null);
      
    } catch (e) {
      print('‚ùå Forgot password error: $e');
      return Left(ServerFailure('Error enviando email de recuperaci√≥n'));
    }
  }

  void _updateGraphQLClientWithToken(String? token) {
    try {
      // Usar el endpoint correcto de la configuraci√≥n
      final endpoint = GraphQLEnvironment.endpoint;
      
      print('üîÑ Updating GraphQL client with endpoint: $endpoint');
      
      final graphQLService = GraphQLService.instance;
      graphQLService.initialize(
        endpoint: endpoint,
        authToken: token,
      );
      
      print('üîÑ GraphQL client updated with auth token');
    } catch (e) {
      print('‚ùå Error updating GraphQL client: $e');
    }
  }

  String _generateProfileImageUrl(String name) {
    if (name.isEmpty) return '';
    
    // Generar una URL de imagen de perfil usando un servicio de avatares
    final encodedName = Uri.encodeComponent(name);
    return 'https://ui-avatars.com/api/?name=$encodedName&background=0d47a1&color=fff&size=200';
  }

  Future<void> debugAuthState() async {
    print('üîç AUTH DEBUG STATE:');
    await _tokenStorage.debugTokenInfo();
    
    final currentUserResult = await getCurrentUser();
    currentUserResult.fold(
      (failure) => print('Current user error: ${failure.toString()}'),
      (user) => print('Current user: ${user.name} (${user.email})'),
    );
  }
}