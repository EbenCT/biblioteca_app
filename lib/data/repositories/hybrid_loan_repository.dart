// lib/data/repositories/hybrid_loan_repository.dart

import 'package:dartz/dartz.dart';
import '../../core/errors/failures.dart';
import '../../domain/entities/entities.dart';
import '../../domain/repositories/repositories.dart';
import 'graphql_loan_repository.dart';
import 'repositories_impl.dart';
import '../mock_data.dart';

/// Repositorio h√≠brido que siempre incluye datos est√°ticos de pr√©stamos
class HybridLoanRepository implements LoanRepository {
  final GraphQLLoanRepository _graphqlRepository;
  final LoanRepositoryImpl _mockRepository;

  HybridLoanRepository(
    this._graphqlRepository,
    this._mockRepository,
  );

  @override
  Future<Either<Failure, List<Loan>>> getLoans({bool? isActive}) async {
    try {
      print('üîÑ Obteniendo pr√©stamos - GraphQL + datos est√°ticos');
      
      // 1. Intentar obtener pr√©stamos del servidor
      List<Loan> serverLoans = [];
      
      final graphqlResult = await _graphqlRepository.getLoans(isActive: isActive);
      graphqlResult.fold(
        (failure) {
          print('‚ö†Ô∏è GraphQL fall√≥ para pr√©stamos: ${failure.message}');
        },
        (loans) {
          serverLoans = loans;
          print('‚úÖ GraphQL devolvi√≥ ${loans.length} pr√©stamos del servidor');
        },
      );
      
      // 2. SIEMPRE agregar los datos est√°ticos (especialmente el pr√©stamo por vencer)
      final mockResult = await _mockRepository.getLoans(isActive: isActive);
      
      return mockResult.fold(
        (failure) {
          // Si falla mock, al menos devolver del servidor
          if (serverLoans.isNotEmpty) {
            return Right(serverLoans);
          }
          return Left(failure);
        },
        (mockLoans) {
          // 3. Combinar servidor + mock, evitando duplicados
          final Map<String, Loan> loanMap = {};
          
          // Primero agregar los del servidor
          for (var loan in serverLoans) {
            loanMap[loan.id] = loan;
          }
          
          // Luego agregar los mock (los est√°ticos tienen prioridad si hay conflicto)
          for (var loan in mockLoans) {
            loanMap[loan.id] = loan;
          }
          
          final combinedLoans = loanMap.values.toList();
          
          // 4. Ordenar por fecha de pr√©stamo (m√°s recientes primero)
          combinedLoans.sort((a, b) => b.loanDate.compareTo(a.loanDate));
          
          print('‚úÖ Devolviendo ${combinedLoans.length} pr√©stamos combinados');
          
          // 5. Verificar que tenemos el pr√©stamo pr√≥ximo a vencer
          final expiringSoon = combinedLoans.where((loan) {
            if (loan.isReturned || loan.isLate) return false;
            final daysUntilDue = loan.dueDate.difference(DateTime.now()).inDays;
            return daysUntilDue <= 3 && daysUntilDue >= 0;
          }).toList();
          
          print('üìä Pr√©stamos pr√≥ximos a vencer en la respuesta: ${expiringSoon.length}');
          
          return Right(combinedLoans);
        },
      );
      
    } catch (e) {
      print('‚ùå Error en HybridLoanRepository: $e');
      // Fallback final: solo datos mock
      return _mockRepository.getLoans(isActive: isActive);
    }
  }

  @override
  Future<Either<Failure, Loan>> getLoanById(String id) async {
    try {
      // 1. Buscar primero en datos est√°ticos
      final allMockLoans = [...MockData.loans, ...MockData.loanHistory];
      final mockLoan = allMockLoans.where((loan) => loan.id == id).firstOrNull;
      
      if (mockLoan != null) {
        print('‚úÖ Pr√©stamo encontrado en datos est√°ticos: ${mockLoan.bookTitle}');
        return Right(mockLoan);
      }
      
      // 2. Si no est√° en mock, buscar en GraphQL
      final graphqlResult = await _graphqlRepository.getLoanById(id);
      return graphqlResult.fold(
        (failure) {
          print('‚ö†Ô∏è GraphQL fall√≥, intentando con mock repository');
          return _mockRepository.getLoanById(id);
        },
        (loan) {
          print('‚úÖ Pr√©stamo encontrado en GraphQL: ${loan.bookTitle}');
          return Right(loan);
        },
      );
      
    } catch (e) {
      print('‚ùå Error en getLoanById: $e');
      return Left(ServerFailure('No se pudo obtener el pr√©stamo'));
    }
  }

  @override
  Future<Either<Failure, List<Loan>>> getLoanHistory() async {
    return getLoans(isActive: false);
  }

  @override
  Future<Either<Failure, double>> getPenalty(String loanId) async {
    try {
      // Intentar GraphQL primero
      final graphqlResult = await _graphqlRepository.getPenalty(loanId);
      
      return graphqlResult.fold(
        (failure) {
          print('‚ö†Ô∏è GraphQL fall√≥ para penalty, usando mock');
          return _mockRepository.getPenalty(loanId);
        },
        (penalty) {
          return Right(penalty);
        },
      );
    } catch (e) {
      return _mockRepository.getPenalty(loanId);
    }
  }

  // M√©todo auxiliar para debugging
  void debugLoansStatus() {
    print('üîç ESTADO DE PR√âSTAMOS:');
    final expiringSoon = MockData.getLoansExpiringSoon(daysThreshold: 3);
    print('   Pr√≥ximos a vencer: ${expiringSoon.length}');
    
    for (var loan in expiringSoon) {
      final daysLeft = loan.dueDate.difference(DateTime.now()).inDays;
      print('   - ${loan.bookTitle}: vence en $daysLeft d√≠as');
    }
  }
}